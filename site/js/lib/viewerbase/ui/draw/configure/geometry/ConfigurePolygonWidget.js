//>>built
require({cache:{"url:esriviewer/ui/draw/configure/geometry/template/ConfigurePolygonTemplate.html":"<div class=\"configureDrawGeometryContainer\">\r\n    <div class=\"annotationOptionContainer\">\r\n        <span class=\"annotationsOptionsLabel\">Fill Style</span>\r\n        <select data-bind=\"options: fillStyles ,value:selectedFillStyle, optionsText: 'label', optionsValue: 'value'\"></select>\r\n    </div>\r\n    <div class=\"annotationOptionContainer\">\r\n        <span class=\"annotationsOptionsLabel\">Outline Style</span>\r\n        <select data-bind=\"options: outlineStyles ,value:selectedOutlineStyle, optionsText: 'label', optionsValue: 'value'\"></select>\r\n    </div>\r\n    <div class=\"annotationOptionContainer\">\r\n        <span class=\"annotationsOptionsLabel\">Outline Width</span>\r\n        <select data-bind=\"options: outlineWidths ,value:selectedOutlineWidth\"></select>\r\n    </div>\r\n    <div class=\"annotationOptionContainer\">\r\n        <span class=\"annotationsOptionsLabel\">Angle</span>\r\n        <select data-bind=\"options: angles ,value:selectedAngle\"></select>\r\n    </div>\r\n    <div data-dojo-attach-point=\"transparencySliderContainer\"></div>\r\n\r\n    <div class=\"colorPickerTextContainer\">\r\n        <span class=\"colorPickerText\"\r\n              data-bind=\"click: setOutlineColorMode,css:{colorPickerTextSelected: outlineColorActive}\"> Outline Color</span>\r\n        <span class=\"colorPickerText\"\r\n              data-bind=\"click: setFillColorMode,css:{colorPickerTextSelected: fillColorActive}\"> Fill Color</span>\r\n\r\n    </div>\r\n\r\n\r\n    <div class=\"configureDrawColorPickerContainer\" data-dojo-attach-point=\"colorPickerContainer\"></div>\r\n</div>"}});define("esriviewer/ui/draw/configure/geometry/ConfigurePolygonWidget",["dojo/_base/declare","dojo/text!./template/ConfigurePolygonTemplate.html","dojo/topic","dojo/_base/lang","dojo/_base/Color","./model/ConfigurePolygonViewModel","./BaseGeometryConfigurationWidget","esri/symbols/SimpleFillSymbol","esri/symbols/SimpleLineSymbol"],function(_1,_2,_3,_4,_5,_6,_7,_8,_9){return _1([_7],{defaultTransparency:50,templateString:_2,postCreate:function(){this.inherited(arguments);this.viewModel=new _6();this.viewModel.fillColorActive.subscribe(_4.hitch(this,this.handleFillColorToggled));this.viewModel.selectedAngle.subscribe(_4.hitch(this,this.processChange));this.viewModel.selectedFillStyle.subscribe(_4.hitch(this,this.processChange));this.viewModel.selectedOutlineStyle.subscribe(_4.hitch(this,this.processChange));this.viewModel.selectedAngle.subscribe(_4.hitch(this,this.processChange));this.viewModel.selectedOutlineWidth.subscribe(_4.hitch(this,this.processChange));this.outlineColor=new _5([255,0,0,this.getTransparency()/100]);this.fillColor=new _5([255,0,0,this.getTransparency()/100]);this.colorPicker.set("value",this.outlineColor.toHex());ko.applyBindings(this.viewModel,this.domNode);},handleTransparencyChanged:function(){var _a=this.getTransparency()/100;this.outlineColor=new _5([this.outlineColor.r,this.outlineColor.g,this.outlineColor.b,_a]);this.fillColor=new _5([this.fillColor.r,this.fillColor.g,this.fillColor.b,_a]);this.inherited(arguments);},handleFillColorToggled:function(_b){if(_b){this.colorPicker.set("value",this.fillColor.toHex());}else{this.colorPicker.set("value",this.outlineColor.toHex());}},handleColorPickerChanged:function(){if(this.viewModel.outlineColorActive()){this.outlineColor=this.getColor();}else{this.fillColor=this.getColor();}this.processChange();},processChange:function(){this.onChange(this.getSymbol());},getSymbol:function(){return new _8(this.viewModel.selectedFillStyle(),new _9(this.viewModel.selectedOutlineStyle(),this.outlineColor,this.viewModel.selectedOutlineWidth()),this.fillColor);}});});