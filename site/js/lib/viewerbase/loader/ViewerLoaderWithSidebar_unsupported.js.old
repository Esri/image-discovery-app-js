define([
    "dojo/_base/declare",
    "xstyle/css!../theme/defaults.css",
    "dojo/Deferred",
    "dojo/_base/window",
    "dojo/_base/lang",
    "dojo/topic",
    "dojo/dom-class",
    "dojo/dom-construct",
    "../base/ViewerGlobals",
    "../manager/ViewerManagerSidebar",
    "../manager/ViewerManagerWindow",
    "../util/RegExpUtils",
    "../util/ViewerUtils",
    "../util/GeometryUtils",
    "../map/geometry/base/ProjectionUtils",
    "dojo/on",
    "dojo/io-query",
    "xstyle/css",
    "./base/ViewerPlacementWindow",
    //require classes that are loaded by the esri js api
    "dijit/PopupMenuItem",
    "dijit/CheckedMenuItem",
    "dijit/layout/StackController",
    "dijit/layout/AccordionPane",
    "xstyle/css!dojox/layout/resources/ResizeHandle.css"

],
    function (declare, defaultTheme, Deferred, dojoWindow, lang, topic, domClass, domConstruct, ViewerGlobals, ViewerManagerSidebar, ViewerManagerWindow, RegExpUtils, ViewerUtils, GeometryUtils, ProjectionUtils, on, ioQuery, Css, ViewerPlacementWindow) {
        return declare(
            [],
            {
                isDebug: false,
                constructor: function (params) {
                    lang.mixin(this, params || {});
                    this.initPageResizeListener();
                    this.viewerConfigurationParameters = {useProxyForConfig: false};
                    this.createGlobalClasses();
                    this.initCss();
                    this.processConfigurationSettings();
                    this.initViewerPlacement().then(lang.hitch(this, function () {
                        this.createViewerManager();
                        this.tweakUI();
                    }));
                },
                initPageResizeListener: function () {
                    on(window, "resize", lang.hitch(this, function () {
                        topic.publish(VIEWER_GLOBALS.EVENTS.WINDOW.REPOSITION_ALL);
                    }));
                },
                initCss: function () {
                    Css.load("dijit/themes/tundra/tundra.css", require, function () {
                    });
                    Css.load("esri/css/esri.css", require, function () {
                    });
                    Css.load("esriviewer/theme/coreUITheme.css", require, lang.hitch(this, function () {
                        //load the overrides
                        var cssOverridePath = location.pathname.replace(/[^\/]+$/, '') + "css/overrides.css";
                        Css.load(cssOverridePath, require, function () {
                        });
                        topic.publish(VIEWER_GLOBALS.EVENTS.CSS.CORE_UI_THEME_LOADED);
                    }));
                },
                initViewerPlacement: function () {
                    if (this.viewerMode == null || (this.viewerMode != VIEWER_GLOBALS.VIEWER_MODES.WINDOW &&
                        this.viewerMode != VIEWER_GLOBALS.VIEWER_MODES.SIDEBAR)) {
                        this.viewerMode = VIEWER_GLOBALS.VIEWER_MODES.WINDOW;
                    }
                    var promise;

                    if (this.viewerMode == VIEWER_GLOBALS.VIEWER_MODES.WINDOW) {
                        promise = this.createViewerPlacementWindow();
                    }
                    else if (this.viewerMode == VIEWER_GLOBALS.VIEWER_MODES.SIDEBAR) {
                        promise = this.createViewerPlacementSidebar();
                    }
                    else {
                        //default to window
                        promise = this.createViewerPlacementWindow();
                    }
                    return promise;
                },
                _handleViewModePlacementRequireLoaded: function (ViewerPlacement) {
                    this.viewPlacement = new ViewerPlacement();
                    window.VIEWER_MODE_SETTINGS = {
                        label: this.viewPlacement.label,
                        isAbsolutePositioned: this.viewPlacement.isAbsolutePositioned,
                        isWindowless: this.viewPlacement.isWindowless
                    };
                },
                createViewerPlacementSidebar: function () {
                    var deferred = new Deferred();
                    require(["esriviewer/loader/base/ViewerPlacementSidebar"], lang.hitch(this, function (ViewerPlacementSidebar) {
                        this._handleViewModePlacementRequireLoaded(ViewerPlacementSidebar);
                        deferred.resolve("success");
                    }));
                    return deferred.promise;
                },
                createViewerPlacementWindow: function () {
                    var deferred = new Deferred();
                    // require(["esriviewer/loader/base/ViewerPlacementWindow"], lang.hitch(this, function (ViewerPlacementWindow) {
                    this._handleViewModePlacementRequireLoaded(ViewerPlacementWindow);
                    deferred.resolve("success");
                    //  }));
                    return deferred.promise;
                },
                tweakUI: function () {
                    domClass.add(dojoWindow.body(), ["defaultTextColor", "defaultFont", "defaultFontSize"]);
                },
                createGlobalClasses: function () {
                    window.VIEWER_GLOBALS = this.createGlobals();
                    window.VIEWER_UTILS = this.createUtils();
                    window.GEOMETRY_UTILS = this.createGeometryUtils();
                    window.REG_EXP_UTILS = this.createRegExpUtils();
                    window.PROJECTION_UTILS = new ProjectionUtils();
                },
                processConfigurationSettings: function () {
                    //see if the user passed configurations
                    if (window && window.location && window.location.href) {
                        var query = window.location.href.substring(window.location.href.indexOf("?") + 1, window.location.href.length);
                        this.windowQueryObject = ioQuery.queryToObject(query);
                        if (this.windowQueryObject != null && lang.isObject(this.windowQueryObject)) {
                            if (this.windowQueryObject.viewerConfig != null) {
                                this.viewerConfigurationParameters.configUrl = this.windowQueryObject.viewerConfig;
                                this.viewerConfigurationParameters.useProxyForConfig = true;
                            }
                            if (this.windowQueryObject.viewerPositionConfig != null) {
                                this.viewerConfigurationParameters.viewerPositioningConfigUrl = this.windowQueryObject.viewerPositionConfig;
                                this.viewerConfigurationParameters.useProxyForPositionConfig = true;
                            }
                            if (this.windowQueryObject.mode != null) {
                                var modeLower = this.windowQueryObject.mode.toLowerCase();
                                if (modeLower == VIEWER_GLOBALS.VIEWER_MODES.SIDEBAR) {
                                    this.viewerMode = VIEWER_GLOBALS.VIEWER_MODES.SIDEBAR;
                                }
                                if (modeLower == VIEWER_GLOBALS.VIEWER_MODES.WINDOW) {
                                    this.viewerMode = VIEWER_GLOBALS.VIEWER_MODES.WINDOW;
                                }
                            }
                        }
                    }
                },
                createGlobals: function () {
                    return new ViewerGlobals();
                },
                createGeometryUtils: function () {
                    return new GeometryUtils();
                },
                createUtils: function () {
                    return new ViewerUtils({isDebug: this.isDebug});
                },
                createRegExpUtils: function () {
                    return new RegExpUtils();
                },
                createViewerManager: function () {
                    var viewerManager;
                    if (this.viewerMode == VIEWER_GLOBALS.VIEWER_MODES.SIDEBAR) {
                        viewerManager = this.createViewerManagerSidebar();
                    }
                    else {
                        viewerManager = this.createViewerManagerWindow();
                    }
                    window.VIEWER_MANAGER = viewerManager;
                    return    window.VIEWER_MANAGER;
                },
                createViewerManagerSidebar: function () {
                    return new ViewerManagerSidebar(this.viewerConfigurationParameters);
                },
                createViewerManagerWindow: function () {
                    return new ViewerManagerWindow(this.viewerConfigurationParameters);
                }

            });
    });